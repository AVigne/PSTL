TODO

- AstExpression à la place des lignes
	-> typées
	-> valeur de retour de type type
	
	- AstVar/Type pour chaque type (int pour le moment) 

	(- AstBlocs pour plus tard)


- Enum des types 


- Generation des lignes de bruit par programBuilder
  -> modifier le code pour générer un nombre d'expressions aléatoires


- Enrichissement
  	->remplacer var/const par des expressions équivalentes (attention aux types)
  	-> dans visiteur, doit etre avant l'expression qu'elle enrichit
  	
  



- Utilisation de l'environnement lexical (lexenv) pour nommer les variables
  -> format du nom : type + id + ( error + idError)
  -> ecriture de méthodes dans le lexenv permettant de connaitre les bornes d'une variable numérique
  
  
- Ajout des lib standard dans la String générée par ASTProgram

  
- Ajout de la gestion de nouvelles erreurs
  -> main à modifier
  -> errorBuilder à modifier
  
- Ajout des types des expressions au moment de la génération des lignes
  -> permet la génération du texte à comparer avec le json
  
- Modification du main pour lire les erreurs en entrée 

